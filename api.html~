<!DOCTYPE html>
<html>
	<head>	
		<link rel = "icon" type = " image/ico " href = "favicon.ico">
		<link  rel = "stylesheet" type = "text/css" href = "jsonConvert.css">
		<link href="http://fonts.googleapis.com/css?family=Gudea" rel="stylesheet" 				type="text/css">
	</head>

	<div id = "title-container">
		<p id = "title">json_convert_csv.js </p>
			
		<ul id="tab-links">
        			
			<li><a href="https://github.com/kramduckner/json_convert_csv">github repo</a></li>		
			<li><a href="api.html#installation">install</a></li>
			<li><a href="examples.html">examples</a></li> 
			<li><a href="api.html#api">API</a></li>

    		</ul>

	</div>
<div id = "main_container">
<div id = "column_container">

	<div id = "header">
			<span class = "example_header">installation</span>

		</div>

	<div id = "installation">
		

		<p id = "npm">use npm to install </p><br>
		<span id = "npm_install" class = "example_api_1">
			
			~$ npm install json_convert_csv

		</span> 
	</div>
<div id = "header">
	<span class = "example_header">API</span>


</div>


	<div id = "api">		
		<div id = "function1"> <span class = "function_title">JSONToCsv({JSON}, includeTitles, callback)</span> 
				<p class = "desc"> accepts JSON in the format of a 					value directly corresponding to a property:</br>
				<span id = "obj">{hotdog: '3'}</span> The csv string can be accessed in the callback.
	
			</p>
			<div class = "example_api_1">
				 <span> <span class = "var">var</span> JSON = {prop1: <span class = "text">'value1'</span>, prop2: <span class = "text">"value2"</span>, prop3: <span class = "text">"value3"</span>}; </span><br><br>
				<span class = "fun">  JSONToCsv</span>(JSON, function(str){ </span><br> <br>
				<span class = "indent1"> console.<span class = "log">log</span>(str) </span> <br><br>
				<span class>}); </span> <br> <br> 
				<span> >>> prop1, prop2, prop3, </span><br>
				<span class = "move_left"> value1, value2, value3, </span><br><br>
			</div>
		</div>
			
		<div id = "function2"> <span class = "function_title">JSONArraysToCsv({JSON}, includeTitles, callback)</span>

				<p class = "desc">accepts JSON in the format of an array directly 					corresponding to a property : </br> <span id = "obj"> 
				{ "prop1": [array] } </span> The csv string can be accessed in the callback.		
			</p>
			<div class = "example_api_1">
				<span> <span class = "var">var</span> arrayJSON = { <span class = "text">'prop1'</span>: [<span class = "text">"elem1"</span>, <span class = "text">"elem2"</span>, <span class = "text">"elem3"</span>], <span class = "text">"prop2"</span>: [<span class = "text">"elem4"</span>, <span class = "text">"elem5"</span>, <span class = "text">"elem6"</span>], <span class = "text">"prop3"</span>: [<span class = 'text'>"elem7"</span>, <span class = "text">"elem8",</span>, <span class = "text">"elem9"</span>] };
</span> <br><br>
	<span class = "fun">JSONArraysToCsv</span>(JSON, function(str){ <br> <br>
		 		<span class = "indent1"> console.<span class = "log">log</span>(str) </span> <br><br>
				<span>}); </span> <br> <br> 
				<span> >>> prop1, prop2, prop3, </span><br>
				<span class = "move_left"> value1, value2, value3, </span><br>
				<span class = "move_left"> value4, value5, value6, </span><br>
				<span class = "move_left"> value7, value8, value9, </span><br>
			</div>	

	
	
		</div>
		
		<div id = "function3"> <span class = "function_title">concatenateCsvStrings (convertedString1), convertedString2)</p>
			<p id = "desc_func3">accepts two converted JSON strings, combines them into one, and outputs the concatenated string. For objects whose property values are all arrays or all values, you could simply merge the objects together and then pass that object into the proper function above, however, if you are working with a combination of the two, you can merge them using concatenateCsvStrings(). Be sure that the first argument is the string converted from JSON without arrays.	<span class = "bold"> Note: convertedString1 is from JSON without arrays, convertedString2 is from JSON with arrays.		
			</p>

			<div id = "example_api_2">
				
<span class = "var">var</span> string1 = <span class = "text">"hotdog,bananas,koala_bears,ant_meat,bread, \n 3,5,2,3,5,\n" </span>;<span class = "comment">// be sure to include "\n" for new lines if input is a text string"</span><br><br>

<span class = "var">var</span> string2 = <span class = "text">"prop1,prop2,prop3, \n elem1,elem4,elem7, \n elem2,elem5,elem8, \n elem3,elem6,elem9,\n"</span>;<br><br>
 
<span class = "var">var</span> newString = <span class = "fun">json2csv.concatenateCsv</span>(string1, string2);<br><br>

console.<span class = "log">log</span>(newString);<br><br>

>>> hotdog,bananas,koala_bears,ant_meat,bread,prop1,prop2,prop3,<br>
<span class = "move_left">3,5,2,3,5,elem1,elem4,elem7,</span><br> 
<span class = "move_left">,,,,, elem2,elem5,elem8,</span><br>
<span class = "move_left">,,,,, elem3,elem6,elem9,</span><br>

		
			</div>
		</div>

		

	</div>

</div>

	

	<div id = "api_nav">
		<p id = "api_nav_install"> installation </p>
		<span id = "api_nav_title">API</span>
		<ul id="api_links">
        				
			<li class = "api_nav_li"><a href="api.html#function1">JSONToCsv()</a></li>
			<li class = "api_nav_li"><a href="api.html#function2">JSONArraysToCsv()</a></li> 
			<li class = "api_nav_li"><a href="api.html#function3">concatenateCsvStrings()</a></li>

    			</ul>

	</div>

</div>
<div class = "footer">

	<span class = "footer_text"> maintained by Mark Buckner 2014</span>

	</div>






</html>
