<!DOCTYPE html>
<html>
	<head>	
		<link rel = "icon" type = " image/ico " href = "favicon.ico">
		<link  rel = "stylesheet" type = "text/css" href = "jsonConvert.css">
		<link href="http://fonts.googleapis.com/css?family=Gudea" rel="stylesheet" 				type="text/css">
	</head>
	
	<div id = "title-container">
		<p id = "title">json_convert_csv.js </p>
			
		<ul id="tab-links">
        			
			<li><a href="https://github.com/kramduckner/json_convert_csv">github repo</a></li>		
			<li><a href="#tab2">install</a></li>
			<li><a href="/examples.html">examples</a></li> 
			<li><a href="#tab4">API</a></li>

    		</ul>

	</div>

<div id = "header">
	<span class = "example_header">Examples</span>


</div>
<p class = "desc2">
			JSONToCsv() outputs a string that can be rendered a file with nodejs's native "fs" module in the callback. A more complex example is at the bottom of this page that demonstrates this! 

		</p>


	<div id = "example5">
	
				 <span> <span class = "var">var</span> JSON = {prop1: <span class = "text">"value1"</span>, prop2: <span class = "text">"value2"</span>, prop3: <span class = "text">"value3" </span>}; </span><br><br>
				<span>  <span class = "fun">JSONToCsv</span>(JSON, function(str){ </span><br> <br>
				<span class = "indent1"> console.<span class = "log">log</span>(str) </span> <br><br>
				<span class>}); </span> <br> <br> 
				<span> >>> prop1, prop2, prop3, </span><br>
				<span class = "move1"> value1, value2, value3, </span><br><br>
		
		</div>
<p class = "desc2">
			JSONArraysToCsv() also outputs a string that can be rendered a file with nodejs's native "fs" module in the callback. This function differes from JSONToCsv() in that the JSON's property is an array rather than a value. See the API for more info and the bottom of this page for a more complex example!

		</p>


	<div id = "example5">
		
				<span> <span class = "var">var</span> arrayJSON = { <span class = "text">'prop1'</span>: [<span class = "text">"elem1"</span>, <span class = "text">"elem2"</span>, <span class = "text">"elem3"</span>], <span class = "text">"prop2"</span>: [<span class = "text">"elem4"</span>, <span class = "text">"elem5"</span>, <span class = "text">"elem6"</span>], <span class = "text">"prop3"</span>: [<span class = 'text'>"elem7"</span>, <span class = "text">"elem8",</span>, <span class = "text">"elem9"</span>] };
</span> <br><br>
<span class = "fun">JSONArraysToCsv</span>(JSON, function(str){ <br> <br>
		 		<span class = "indent1"> console.<span class = "log">log</span>(str) </span> <br><br>
				<span>}); </span> <br> <br> 
				<span> >>> prop1, prop2, prop3, </span><br>
				<span class = "move1"> value1, value2, value3, </span><br>
				<span class = "move1"> value4, value5, value6, </span><br>
				<span class = "move1"> value7, value8, value9, </span><br>
	</div>

<p class = "desc2">
			concatenateCsvStrings() is for when you have two strings differing in the type of csv string - one with JSON containing arrays and the other without. This function inserts the proper amount of commas, concatenates the strings, and returns it as a new string. Click the API tab for more info. Below is a simple example. 

		</p>

<div id = "example5">
				
<span class = "var">var</span> string1 = <span class = "text">"hotdog,bananas,koala_bears,ant_meat,bread, \n 3,5,2,3,5,\n" </span>; <span class = "comment">// be sure to include "\n" for new lines if input is a text string"</span><br><br>

<span class = "var">var</span> string2 = <span class = "text">"prop1,prop2,prop3, \n elem1,elem4,elem7, \n elem2,elem5,elem8, \n elem3,elem6,elem9,\n"</span>;<br><br>
 
<span class = "var">var</span> newString = <span class = "fun">json2csv.concatenateCsv</span>(string1, string2);<br><br>

console.<span class = "log">log</span>(newString);<br><br>

>>> hotdog,bananas,koala_bears,ant_meat,bread,prop1,prop2,prop3,<br>
<span class = "move1">3,5,2,3,5,elem1,elem4,elem7,</span><br> 
<span class = "move1">,,,,, elem2,elem5,elem8,</span><br>
<span class = "move1">,,,,, elem3,elem6,elem9,</span><br>

		
			</div>
	<div class = "description_container">
		<p class = "desc">
			Here's a more complicated and realistic example that utilizes the entire API. Let's say you get some JSON, like in the code below. It's unlikely you'll want to include everything in a spreadsheet. For example, you might just want the "stuff" "title" and "random_numbers" properties and corresponding values. Unfortuantely, the best way to do this is to populate a new object with these strings and pass that into the json_convert_csv.js API. 

		</p>

	</div>

	<div id = "example2">
		
		<span class = "var"> var </span> json2csv = require(<span class = "text">"json_convert_csv</span>); <br>
<span class = "var"> var </span> fs = require(<span class = "text">"fs"</span>); <br><br>
<span class = "var"> var </span> JSON = { <br>
<span class = "indent1"> <span class = "text">"stuff" </span>: { </span> <br>
<span class = "indent2"> <span class = "text"> "title" </span> : <span class = "text"> "dogs butts and cat noses" </span> , </span> <br>
<span class = "indent3"> <span class = "text"> "computer" </span> : { </span> <br>
<span class = "indent4"> <span class = "text"> "title" </span> : <span class = "text"> "I_am_a_computer"</span> , </span> <br>
<span class = "indent4"> <span class = "text"> "numerical data" </span> : { </span> <br>
<span class = "indent5"> <span class = "text"> "sample" </span> : { </span> <br>
<span class = "indent6"> <span class = "text"> "ID" </span> : <span class = "text"> "paul dirac" </span> , </span> <br>
<span class = "indent6"> <span class = "text"> "pizza"</span> : <span class = "text"> "meatballs" </span> , </span> <br>
<span class = "indent6"> <span class = "text"> "more_stuff" </span> : { </span> <br>
<span class = "indent7"> <span class = "text"> "elements" </span> : [<span class = "text"> "mercury" </span>, <span class = "text"> "molybdenum" </span> , <span class = "text"> "lead" </span> ], </span> <br>
<span class = "indent7"> <span class = "text"> "random_numbers" </span> : [<span class = "math">Math</span>.<span class = "log">random()</span>, <span class = "math">Math</span>.<span class = "log">random()</span>] </span> <br>
<span class = "indent6"> } </span> <br>
<span class = "indent5"> } </span> <br>
<span class = "indent4"> } </span> <br>
<span class = "indent3"> } </span> <br>
<span class = "indent2"> } </span> <br>
<span class = "indent1"> } </span> <br> <br>
<span class = "var"> var </span> myObj = {}; <br>
<span class = "var"> var </span> myObj2 = {}; <br>
<span class = "var"> var </span> stringo1; <br>
<span class = "var"> var </span> stringo2; <br><br>
myObj.title = JSON[<span class = "text"> "stuff" </span> ][<span class = "text"> "title" </span>]; <br>
myObj2.GlossSeeAlso = JSON[<span class = "text"> "stuff" </span>][<span class = "text"> "computer" </span> ][<span class = "text">"numerical data"</span>][<span class = "text">"sample"</span>][<span class = "text"> "more_stuff" </span>][<span class = "text">"random_numbers"</span>]; <br><br>
fs.exists(<span class = "text">"exampl3.csv"</span>, function(exists){ <br> <br>
<span class = "indent1"> if (exists){ </span> <br> <br>
<span class = "indent2"> json2csv.<span class = "fun">JSONToCsv</span>(myObj, <span class = "bool">false</span>, function(str){ </span> <br><br>
<span class = "indent3"> stringo1 = str; </span> <br><br>
<span class = "indent2"> }); </span> <br><br>
<span class = "indent2"> json2csv.<span class = "fun">JSONArraysToCsv</span>(myObj2, <span class = "bool">false</span>, function(str){ </span> <br><br>
<span class = "indent3"> stringo2 = str; </span> <br><br>
<span class = "indent2"> }); </span> <br><br>
<span class = "indent2"> <span class = "var"> var </span> newString = json2csv.<span class = "fun">concatenateCsvStrings</span>(stringo1, stringo2); </span> <br><br>
<span class = "indent2"> fs.appendFile(<span class = "text">"example3.csv"</span>, newString, function(err){ </span> <br><br>
<span class = "indent3"> if (err){ </span> <br><br>
<span class = "indent4"> console.<span class = "log">log</span>(err); </span> <br><br>
<span class = "indent3"> } </span> <br><br>
<span class = "indent3"> else{ </span> <br><br>	
<span class = "indent4"> console.<span class = "log">log</span>(<span class = "text">"file rendered!"</span>) </span> <br><br>		
<span class = "indent3"> } </span> <br><br>
<span class = "indent2"> }); </span> <br><br>
<span class = "indent1"> } </span> <br><br>
<span class = "indent1"> else{ </span> <br><br>
<span class = "indent2"> json2csv.<span class = "fun">JSONToCsv</span>(myObj, <span class = "bool">true</span>, function(str){ </span> <br><br>
<span class = "indent3"> stringo1 = str; </span> <br><br>
<span class = "indent2"> }); </span> <br><br>
<span class = "indent2"> json2csv.<span class = "fun">JSONArraysToCsv</span>(myObj2, <span class = "bool">true</span>, function(str){ </span> <br><br>
<span class = "indent3"> stringo2 = str; </span> <br><br>
<span class = "indent2"> }); </span> <br><br>
<span class = "indent2"> <span class = "var"> var </span> newString = json2csv.<span class = "fun">concatenateCsvStrings</span>(stringo1, stringo2); </span> <br><br>
<span class = "indent2"> fs.appendFile(<span class = "text">"example3.csv"</span>, newString, function(err){ </span> <br><br>
<span class = "indent3"> if (err){ </span> <br><br>
<span class = "indent4"> console.<span class = "log">log</span>(err); </span> <br><br>
<span class = "indent3"> } </span> <br><br>
<span class = "indent3"> else{ </span> <br><br>
<span class = "indent4"> console.<span class = "log">log</span>(<span class = "text">"file edited!"</span>) </span> <br><br>		
<span class = "indent3"> } </span> <br><br>
<span class = "indent2"> }); </span> <br><br>
<span class = "indent1"> } </span> <br><br>
});<br>


	</div>
	<div class = "footer">

	<span class = "footer_text"> maintained by Mark Buckner 2014</span>

	</div>
</div>	

	</div>


</html>
